##4. Correlation + Linear model
cor(games$SteamSpyOwners, games$ScreenshotCount)
screen_mod <- lm(SteamSpyOwners ~ ScreenshotCount, data = games)
summary(screen_mod)
mean(screen_mod$residuals)
qqnorm(screen_mod)
##regression analysis
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$ScreenshotCount, main="ScreenshotCount",
sub=paste("Outliers: ", length(boxplot.stats(games$ScreenshotCount)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$ScreenshotCount), main="Density Plot: ScreenshotCount", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$ScreenshotCount), 2)))  # density plot for ScreenshotCount
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
##4. Correlation + Linear model
cor(games$SteamSpyOwners, games$ScreenshotCount)
screen_mod <- lm(SteamSpyOwners ~ ScreenshotCount, data = games)
summary(screen_mod)
mean(screen_mod$residuals)
plot(screen_mod)
##length(DetailedDescrip) vs. SteamSpyOwners
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$PriceFinal, y=games$SteamSpyOwners, main="PriceFinal ~ SteamSpyOwners")
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$PriceFinal, main="PriceFinal",
sub=paste("Outliers: ", length(boxplot.stats(games$PriceFinal)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$PriceFinal), main="Density Plot: PriceFinal", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$PriceFinal), 2)))  # density plot for PriceFinal
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$ScreenshotCount), main="Density Plot: ScreenshotCount", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$ScreenshotCount), 2)))  # density plot for ScreenshotCount
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$ScreenshotCount), main="Density Plot: ScreenshotCount", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$ScreenshotCount), 2)))  # density plot for ScreenshotCount
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
favstats(games$SteamSpyOwners)
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$ScreenshotCount), main="Density Plot: ScreenshotCount", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$ScreenshotCount), 2)))  # density plot for ScreenshotCount
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
favstats5(games$SteamSpyOwners)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##3. Density plot (check for normality of the data)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(games$ScreenshotCount), main="Density Plot: ScreenshotCount", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$ScreenshotCount), 2)))  # density plot for ScreenshotCount
polygon(density(games$ScreenshotCount), col="red")
plot(density(games$SteamSpyOwners), main="Density Plot: SteamSpyOwners", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(games$SteamSpyOwners), 2)))  # density plot for 'dist'
polygon(density(games$SteamSpyOwners), col="red")
favstats(games$SteamSpyOwners)
cor(games$SteamSpyOwners, games$PriceFinal)
screen_mod <- lm(SteamSpyOwners ~ PriceFinal, data = games)
summary(screen_mod)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
gf_point(ScreenshotCount ~ SteamSpyOwners, data = games)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
gf_point(SteamSpyOwners ~ ScreenshotCount, data = games)
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$ScreenshotCount, main="ScreenshotCount",
sub=paste("Outliers: ", length(boxplot.stats(games$ScreenshotCount)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
##gf_point(SteamSpyOwners ~ ScreenshotCount, data = games)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$PriceFinal, y=games$SteamSpyOwners, main="PriceFinal ~ SteamSpyOwners")
screen_mod <- lm(SteamSpyOwners ~ PriceFinal, data = games)
##summary(screen_mod)
mplot(screen_mod, which = 1)
screen_mod <- lm(SteamSpyOwners ~ ScreenshotCount, data = games)
##summary(screen_mod)
mplot(screen_mod, which = 1)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##screen_mod <- lm(SteamSpyOwners ~ ScreenshotCount, data = games)
##summary(screen_mod)
##mplot(screen_mod, which = 1)
screen_log <- log(games$ScreenshotCount)
owners_log <- log(games$SteamSpyOwners)
screen_log <- log(games$ScreenshotCount)
owners_log <- log(games$SteamSpyOwners)
scatter.smooth(x=screen_log, y=owners_log, main="ScreenshotCount ~ SteamSpyOwners(log)")
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
##gf_point(SteamSpyOwners ~ ScreenshotCount, data = games)
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games)
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games)
gf_point(owners_sqrt ~ screen_sqrt, data = games)
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm()
gf_point(owners_sqrt ~ screen_sqrt, data = games) %>% gf_lm()
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm() %>% stat_lm()
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm()
gf_point(owners_sqrt ~ screen_sqrt, data = games) %>% gf_lm()
cor(games$owners_sqrt, games$screen_sqrt)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log)
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm()
gf_point(owners_sqrt ~ screen_sqrt, data = games) %>% gf_lm()
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log)
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log, na.rm = TRUE)
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log)
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log, use="complete.obs")
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log, use="pairwise.complete.obs")
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log, use="all.obs") ##excluding the NA values
##cor(games$owners_sqrt, games$screen_sqrt)
cor(games$owners_log, games$screen_log, use="complete.obs") ##excluding the NA values
##cor(owners_sqrt ~ screen_sqrt, data = games)
cor(owners_log ~ screen_log, data = games, use="complete.obs") ##excluding the NA values
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
mplot(screen_fit_sqrt, which = 1)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
screen_fit_log <- lm(owners_log ~ screen_log, data = games)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$PriceFinal, main="PriceFinal",
sub=paste("Outliers: ", length(boxplot.stats(games$PriceFinal)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##creating sqrt
games$priceFinal_sqrt <- sqrt(games$PriceFinal)
##scatter plot
gf_point(owners_sqrt ~ priceFinal_sqrt, data = games) %>% gf_lm()
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm()
gf_point(owners_sqrt ~ screen_sqrt, data = games) %>% gf_lm()
##creating sqrt
games$priceFinal_sqrt <- sqrt(games$PriceFinal)
##scatter plot
gf_point(owners_sqrt ~ priceFinal_sqrt, data = games) %>% gf_lm()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
library(e1071) ##needed for normality graphs
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
##library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
##then group by if metacritic != 0 (one group of games that received the score, and one that didn't)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$ScreenshotCount, y=games$SteamSpyOwners, main="ScreenshotCount ~ SteamSpyOwners")
##gf_point(SteamSpyOwners ~ ScreenshotCount, data = games)
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$ScreenshotCount, main="ScreenshotCount",
sub=paste("Outliers: ", length(boxplot.stats(games$ScreenshotCount)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##creating logs
games$screen_log <- log(games$ScreenshotCount)
games$owners_log <- log(games$SteamSpyOwners)
##creating sqrt
games$screen_sqrt <- sqrt(games$ScreenshotCount)
games$owners_sqrt <- sqrt(games$SteamSpyOwners)
##scatter.smooth(x=games$screen_log, y=games$owners_log, main="ScreenshotCount ~ SteamSpyOwners(logs)")
gf_point(owners_log ~ screen_log, data = games) %>% gf_lm()
gf_point(owners_sqrt ~ screen_sqrt, data = games) %>% gf_lm()
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
mplot(screen_fit_sqrt, which = 2)
screen_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
mplot(screen_fit_sqrt, which = 2)
mplot(screen_fit_sqrt, which = 3)
##cor(owners_sqrt ~ screen_sqrt, data = games)
cor(owners_log ~ screen_log, data = games, use="complete.obs") ##excluding the NA values
cor(owners_sqrt ~ screen_sqrt, data = games)
##cor(owners_log ~ screen_log, data = games, use="complete.obs") ##excluding the NA values
summary(screen_fit_sqrt)
##cor(owners_sqrt ~ screen_sqrt, data = games)
cor(owners_sqrt ~ screen_sqrt, data = games)
summary(screen_fit_sqrt)
##ScreenshotCount vs. SteamSpyOwners
##1. Scatterplot, to visualize the relationship
scatter.smooth(x=games$PriceFinal, y=games$SteamSpyOwners, main="PriceFinal ~ SteamSpyOwners")
##2. BoxPlots
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(games$PriceFinal, main="PriceFinal",
sub=paste("Outliers: ", length(boxplot.stats(games$PriceFinal)$out)))  # box plot for ScreenshotCount
boxplot(games$SteamSpyOwners, main="SteamSpyOwners",
sub=paste("Outliers: ", length(boxplot.stats(games$SteamSpyOwners)$out)))  # box plot for SteamSpyOwners
##creating sqrt
games$priceFinal_sqrt <- sqrt(games$PriceFinal)
##scatter plot
gf_point(owners_sqrt ~ priceFinal_sqrt, data = games) %>% gf_lm()
priceFinal_fit_sqrt <- lm(owners_sqrt ~ screen_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
priceFinal_fit_sqrt <- lm(owners_sqrt ~ priceFinal_sqrt, data = games)
##screen_fit_log <- lm(owners_log ~ screen_log, data = games)
mplot(screen_fit_sqrt, which = 1)
mplot(screen_fit_sqrt, which = 2)
mplot(screen_fit_sqrt, which = 3)
cor(games$SteamSpyOwners, games$PriceFinal)
summary(priceFinal_fit_sqrt)
View(games)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr) ##for different filter()
##library(e1071) ##needed for normality graphs
library(mosaic)##favstats
games_features <- read_xlsx("games_features.xlsx")
##we need only games:
games <- filter(games_features, GenreIsNonGame == FALSE)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
View(with_metacritic)
View(without_metacritic)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
meta_nonmeta <- (length(with_metacritic), length(without_metacritic))
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
meta_nonmeta <- c(length(with_metacritic), length(without_metacritic))
barplot(meta_nonmeta)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
length(with_metacritic)
length(without_metacritic)
##meta_nonmeta <- c(length(with_metacritic), length(without_metacritic))
##barplot(meta_nonmeta)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
length(with_metacritic$QueryID)
length(without_metacritic$QueryID)
##meta_nonmeta <- c(length(with_metacritic), length(without_metacritic))
##barplot(meta_nonmeta)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
meta_nonmeta <- c(length(with_metacritic$QueryID), length(without_metacritic$QueryID))
barplot(meta_nonmeta)
with_metacritic <- filter(games, Metacritic > 0)
without_metacritic <- filter(games, Metacritic == 0)
meta_nonmeta <- c(length(with_metacritic$QueryID), length(without_metacritic$QueryID))
barplot(meta_nonmeta, main = "Have Metacritic vs Don't Have Metacritic", ylab = "Number of Games")
boxplot(with_metacritic$SteamSpyOwners ~ without_metacritic$SteamSpyOwners)
boxplot(with_metacritic$SteamSpyOwners)
summary(with_metacritic$SteamSpyOwners)
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
favstats(with_metacritic$SteamSpyOwners)
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
favstats(with_metacritic$SteamSpyOwners)
favstats(without_metacritic$SteamSpyOwners)
##summary(with_metacritic$SteamSpyOwners)
##summary(without_metacritic$SteamSpyOwners)
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
View(games)
print("SteamSpyOwners:")
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
print("SteamSpyOwners(with Metacritic first):")
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
print("SteamSpyOwners(with Metacritic first):")
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
print("PriceFinal:")
summary(with_metacritic$PriceFinal)
summary(without_metacritic$PriceFinal)
boxplot(with_metacritic$SteamSpyOwners)
print("SteamSpyOwners(with Metacritic first):")
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
print("PriceFinal:")
summary(with_metacritic$PriceFinal)
summary(without_metacritic$PriceFinal)
print("RecommendationCount:")
summary(with_metacritic$RecommendationCount)
summary(without_metacritic$RecommendationCount)
print("PriceFinal:")
summary(with_metacritic$PriceFinal)
summary(without_metacritic$PriceFinal)
print("SteamSpyOwners(with Metacritic first):")
summary(with_metacritic$SteamSpyOwners)
summary(without_metacritic$SteamSpyOwners)
print("PriceFinal:")
summary(with_metacritic$PriceFinal)
summary(without_metacritic$PriceFinal)
print("RecommendationCount:")
summary(with_metacritic$RecommendationCount)
summary(without_metacritic$RecommendationCount)
print("AchievementCount:")
summary(with_metacritic$AchievementCount)
summary(without_metacritic$AchievementCount)
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Metacritic group ")
polygon(d, col="red", border = "blue")
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Metacritic group ")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Metacritic group ")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Non-Metacritic group ")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Metacritic group ")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$SteamSpyOwners)
plot(d1, main = "Kernel Density of Owners for Non-Metacritic group ")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$RecommendationCount)
plot(d1, main = "RecommendationCount Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$RecommendationCount)
plot(d1, main = "RecommendationCount Non-Metacritic")
polygon(d1, col="red", border = "blue")
#Kernel Density plots for the variables
d1 <- density(with_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$SteamSpyOwners)
plot(d1, main = "Owners Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$PriceFinal)
plot(d1, main = "PriceFinal Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$RecommendationCount)
plot(d1, main = "RecommendationCount Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$RecommendationCount)
plot(d1, main = "RecommendationCount Non-Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(with_metacritic$AchievementCount)
plot(d1, main = "AchievementCount Metacritic")
polygon(d1, col="red", border = "blue")
d1 <- density(without_metacritic$AchievementCount)
plot(d1, main = "AchievementCount Non-Metacritic")
polygon(d1, col="red", border = "blue")
